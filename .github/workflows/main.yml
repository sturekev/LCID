name: CI/CD Pipeline

on: 
  push:
    branch: [main]

jobs:

  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python all python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.12
          architecture: x64
          
      - name: upgrade pip
        run: python -m pip install --upgrade pip
        
      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name:  Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      
      - name: upgrade pip 00
        run: pip3 install --upgrade pip
      
      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r ubuntuRequirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'
        
     
        
      # Install all the app dependencies
      - name: Install dependencies
        run: pip3 install -r ubuntuRequirements.txt

      # Build the app and run tests
      - name: Build and Run Test
        run: . venv/bin/activate
      
      # - name: test login
      #   run: cd Backend && pytest ./Test/testLogin.py

      - name: test testCafAccess
        run: . venv/bin/activate && cd Backend && pytest ./Test/testCafAccess.py
        
      - name: test testHallAccess
        run: cd Backend && pytest ./Test/testHallAccess.py

      - name: test testAuthorize
        run: cd Backend && pytest ./Test/testAuthorize.py
        
      - name: test testUserMe
        run: cd Backend && pytest ./Test/testUserMe3.py
      
      - name: test cafAccess function
        run: cd Backend && pytest ./DiningService/Test/test_caf_functions.py

      # - name: test Database
      #   run: cd DATABASE/Test && pytest test_database_access.py

      - name: Create Zipfile archive of Dependencies
        run: |
          cd ./venv/lib/python3.10/site-packages
          zip -r9 ../../../../api.zip .

      - name: Add App to Zipfile
        run: cd ./Backend && zip -g ../api.zip -r .

      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip

# continuous-deployment:
#   runs-on: ubuntu-latest
#   needs: [continuous-integration]
#   if: github.ref == 'refs/heads/main'
#   steps:

#     - name: Install AWS CLI
#       uses: unfor19/install-aws-cli-action@v1
#       with:
#         version: 1
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#     - name: Download Lambda api.zip
#       uses: actions/download-artifact@v2
#       with:
#         name: api

#     - name: Upload to S3
#       run: aws s3 cp api.zip s3://medium-aws-fastapi/api.zip
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

#     - name: Deploy new Lambda
#       run: aws lambda update-function-code --function-name serverless-api --s3-bucket medium-aws-fastapi --s3-key api.zip
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
